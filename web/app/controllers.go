// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "recipe": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/jaredwarren/recipe/web/design
// --out=$(GOPATH)/src/github.com/jaredwarren/recipe/web
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/encoding/form"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(form.NewDecoder, "application/x-www-form-urlencoded")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(form.NewDecoder, "*/*")
}

// ImageController is the controller interface for the Image actions.
type ImageController interface {
	goa.Muxer
	goa.FileServer
	Show(*ShowImageContext) error
	Upload(*UploadImageContext) error
}

// MountImageController "mounts" a Image resource controller on the given service.
func MountImageController(service *goa.Service, ctrl ImageController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowImageContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	service.Mux.Handle("GET", "/images/:id", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Image", "action", "Show", "route", "GET /images/:id")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUploadImageContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Upload(rctx)
	}
	service.Mux.Handle("POST", "/images/", ctrl.MuxHandler("upload", h, nil))
	service.LogInfo("mount", "ctrl", "Image", "action", "Upload", "route", "POST /images/")

	h = ctrl.FileHandler("/download/*filename", "images/")
	service.Mux.Handle("GET", "/download/*filename", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Image", "files", "images/", "route", "GET /download/*filename")

	h = ctrl.FileHandler("/download/", "images/index.html")
	service.Mux.Handle("GET", "/download/", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Image", "files", "images/index.html", "route", "GET /download/")
}

// WebController is the controller interface for the Web actions.
type WebController interface {
	goa.Muxer
	Create(*CreateWebContext) error
	Delete(*DeleteWebContext) error
	List(*ListWebContext) error
	Show(*ShowWebContext) error
	Update(*UpdateWebContext) error
}

// MountWebController "mounts" a Web resource controller on the given service.
func MountWebController(service *goa.Service, ctrl WebController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateWebContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateWebPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	service.Mux.Handle("POST", "/recipe/", ctrl.MuxHandler("create", h, unmarshalCreateWebPayload))
	service.LogInfo("mount", "ctrl", "Web", "action", "Create", "route", "POST /recipe/")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteWebContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	service.Mux.Handle("DELETE", "/recipe/:id", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Web", "action", "Delete", "route", "DELETE /recipe/:id")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListWebContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	service.Mux.Handle("GET", "/recipe/", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Web", "action", "List", "route", "GET /recipe/")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowWebContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	service.Mux.Handle("GET", "/recipe/:id", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Web", "action", "Show", "route", "GET /recipe/:id")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateWebContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateWebPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	service.Mux.Handle("PATCH", "/recipe/:id", ctrl.MuxHandler("update", h, unmarshalUpdateWebPayload))
	service.LogInfo("mount", "ctrl", "Web", "action", "Update", "route", "PATCH /recipe/:id")
}

// unmarshalCreateWebPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateWebPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createWebPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateWebPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateWebPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateWebPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
